<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My CS Learning</title>
    <link>http://example.org/</link>
    <description>Recent content on My CS Learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 May 2023 20:42:57 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ansible</title>
      <link>http://example.org/docs/stage1/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/ansible/</guid>
      <description>Inventory file # alias(别名)
ansible_host=IP/FQDN(fully qualified domain name, 完整域名)
ansible_connection=ssh/winrm/localhost
ansible_port=22(default for ssh)
ansible_user=root/administrator
ansible_ssh_pass(ansible_password for win)=password
[group_name1]
Groupmember_alias1 or host
[group_name2]
Groupmember_alias2 or host
[group_name3:children] 继承
group_name1
group_name2
YAML # Key :(colon) value
冒号后面一定要加空格！
Dictionary: unodered
List: ordered
Ansible playbook # .yaml/.yml 格式的文件
Run ansible playbooks:
ansible -? (module) -i inventory.txt e.g., ansible target -m ping -i inventory.txt run command one by one Ansible-playbook -i inventory.txt e.g., ansible-playbook test.</description>
    </item>
    
    <item>
      <title>CI/CD</title>
      <link>http://example.org/docs/stage2/cicd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/cicd/</guid>
      <description>Section 1: 持续集成和Jenkins介绍 # 持续集成 # 在开发过程中尽早地发现bug 持续集成、持续交付、持续部署的区别 持续集成：个人研发的部分向软件整体的部分交付。频繁进行集成可以更快地发现其中的问题 持续交付：将集成后的代码交付到类生产环境中 持续部署：自动部署到生产环境中 Jenkins介绍 # Jenkins是持续集成和构建服务器 Java写的，开源的 Section 2: 环境配置和Jenkins安装 # java version：1.8.0 （Java 8）
Jenkins version: 2.121.3，这个版本很多plugin用不了了，所以改用2.346.1
Section 3: Jenkins架构、术语、UI介绍、创建第一个Jenkins Job # Master和Slave架构 # master改成main了
关键术语 # Job/Project: 由Jenkins监视或控制的任务 Slave/Node: node是所有的机器，包括slave和master slave agent：jenkins在slave上运行一个单独的程序 slave注册到master之后，master开始向slave分配负载 Executor: 独立的构建流，一个node可以有&amp;gt;=1个executor Build: 一个build是一个job/project的结果 Plugin: 拓展核心jenkins服务核心功能的软件 Jenkins UI # manage plugin报错怎么办
创建第一个Jenkins Job # 运行第一个Jenkins Job # 注意manage Jenkins -&amp;gt; manage plugin →advanced 中的HTTP Proxy Configuration</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>http://example.org/docs/oatk/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/oatk/database/</guid>
      <description>AR: Why Intel&amp;rsquo;s driver is open-source, and Nvidia&amp;rsquo;s driver is not open-source. How about AMD?
AMD也是开源的
Intel和AMD开源是因为CPU指令集就那几种，大家都是统一的
什么是CPU指令集：
reduced instruction set computing 精简指令集，ARM complex &amp;hellip; 复杂指令集，Intel GPU的指令系统更复杂，有发送给不同单元的控制指令，还有发给流处理器并行执行的流处理器指令，暴露了GPU的指令页面在一定程度上就暴露了GPU的硬件设计（Open-sourcing their drivers would reveal a lot of how their hardware worked, and give away secrets to their competitors.）
From Nvidia: Most customers require Nvidia to provide an e2e solution, which means Nvidia wholly responsible for product delivery and support, including the drivers. Therefore, Nvidia decide to retain source code control.</description>
    </item>
    
    <item>
      <title>Docker in Action</title>
      <link>http://example.org/docs/stage2/docker-in-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/docker-in-action/</guid>
      <description>Introduction # Chapter 1: Welcome to Docker # Docker make it easier for users to install and run the software. Docker is a tool helping solve common problems such as installing, removing, upgrading, distributing, trusting and running software, helping system administrators focus on higher-value activities. What is Docker? # Docker is an open source project for building, shipping and running programs.
containers Install Docker
https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository Take care of the setting of proxy https://docs.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>http://example.org/docs/stage1/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/git/</guid>
      <description>git reset
git reverse
git rebase
git rebase main
当前在bugFix这个branch，把当前的branch copy到main branch
git rebase a b
将b复制到a下
git rebase bugFix
git rebase bugFix main
git pull &amp;ndash;rebase
git push origin main (git push )
git push origin &amp;lt;source本地&amp;gt;:&amp;lt;destination远&amp;gt;
如果是空的，例如 git push origin :foo ，那就是删除foo on remote
git fetch 和 git pull的区别？git pull = git fetch + merge
git fetch origin &amp;lt;source远&amp;gt;:&amp;lt;destination本地&amp;gt;
如果是空的，例如git fetch origin :bar, 那就是新建bar 分支</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://example.org/docs/stage2/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/go/</guid>
      <description>Chapter 1: Set up Go Environment # Go Workspace # export GOPATH=$HOME/go export PATH=$PATH:$GOPATH/bin Use go env to show all the environment variables
Environmemnt variable:
variable GOPATH: point to your go workspace
variable GOROOT: point to your binary installation of GO
Go Command # go run compile your code into a binary. However, the binary is build in a temporary directory.
go build
go build -o + binary name Getting third party go tools # go install location_of_source_code_repo@version: Install the binary in $GOPATH/bin directory.</description>
    </item>
    
    <item>
      <title>K8s in Action</title>
      <link>http://example.org/docs/stage2/k8s-in-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/k8s-in-action/</guid>
      <description>第一章：Kubernetes 介绍 # Kubernetes 通过对实际硬件做抽象，然后将自身暴露成一个平台，用于部署和运行应用程序。它允许开发者自己配置和部署应用程序，而不需要系统管理员的帮助，让开发者聚焦于保持底层基础设施运转正常的同时，不需要关注实际运行在平台上的应用程序。
K8s系统由一个主节点和若干个工作节点组成。开发者把一个应用列表提交到主节点，k8s会把它们部署到集群的工作节点。组件被具体部署在哪个节点对于开发者和系统管理员来说都不用关心。
控制面板中的组件运行在单个或多个主节点上 API服务器: 其他控制面包组件都与它通信 Scheduler: 调度应用，为每个组件分配一个工作节点 Controller Manager: 执行集群级别的功能，如复制组件、持续跟踪工作节点、处理节点失败 etcd: 分布式数据存储，储存集群配置 工作节点：运行容器化应用的机器 Kubelet: 与API服务器通信，管理它所在节点的容器 Kube-proxy: 负责组件之间的负载均衡网络流量 第二章：开始使用K8S和Docker # kubectl cluster-info 展示集群信息
kubectl get 列出各种kubernetes对象的基本信息, e.g., kubectl get nodes kubectl describe node xxx 查看更详细的信息
为kubectl创建别名 alias k=kubectl , tab命令补全
pod: 一组紧密相关的容器，运行在同一个工作节点上，同一个linux命名空间内
不能用kubectl get 列出单个容器，因为它们不是独立的k8s对象，但是可以列出pod，kubectl get pods
调度scheduling：将pod分配给一个节点
kubectl expose re kubia --type=LoadBalancer --name kubia-http 创建外部的负载均衡，可以通过负载均衡的公共ip访问pod
kubia-http服务：解决不断变化的pod IP地址的问题
ReplicationController：负责pod并让它们保持运行
第三章：pod: 运行于Kubernetes中的容器 # 介绍pod # 一个pod不会跨越多个工作节点
想象一个由多个进程组成的应用程序，由于不能将多个进程聚集在一个单独的容器中（很难确定每个进程分别记录了什么），我们需要用pod将容器绑定在一起，作为一个单元进行管理</description>
    </item>
    
    <item>
      <title>Linux1</title>
      <link>http://example.org/docs/stage1/linux1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/linux1/</guid>
      <description>第零章 计算机基础 # 操作系统是连接硬件和用户的，让用户不用对着机器文档编程，更方便 操作系统用来有效率地控制计算机的硬件资源，并且提供方便程序员编程的接口
第一章 Linux是什么 # 网路基础： http://www.study-area.org/network/network.htm
在Linux系统中， 每个设备都被当成一个文件来对待
第二章 主机规划与磁盘分区 # 第三章 安装一个Linux系统s # 简单翻过去了
第四章 首次登陆与线上求助 # man指令学到了很多小技巧，比如/search 一些数字的含义 如果忘记指令了怎么办？ man后面的一些后缀 nano vimtutor
第五章 Linux文件权限与目录配置 # 各种权限查看和更改
ls -l
chgrp, chown, chmod 各种权限是什么含义，尤其是目录文件的 注意目录的x权限 绝对目录、相对目录
第六章 Linux文件与目录管理 # .和..和~
PATH
rmdir 删除空目录 rm-r 删除不空的目录
mv除了移动文件，也可以用作文件的更名
管线|：前一个指令输出的讯息，通过管线交给后续的指令继续使用
eg：cat -n /etc/man_db.conf | head -n 20 | tail -n 10 分号；：在一行中输入多个指令
touch 创建新的空文件，修改 /atime（access读取时间）和mtime（modify修改时间），不能修改ctime（status time）
查阅文件内容 cat, less, more, tail, head</description>
    </item>
    
    <item>
      <title>Linux2</title>
      <link>http://example.org/docs/stage2/linux2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage2/linux2/</guid>
      <description>第二章：基础网络概念 # 什么是网络
制定标准 计算机网络的组成组件
节点node：有网络地址（IP）的设备 服务器主机server：提供数据以响应给用户的主机 工作站workstation：可以在计算机网络输入的设备 客户端client：主动发起联机去要求数据的工作站是客户端 网络卡network interface card：提供网络联机功能；一般node都有&amp;gt;=1 个网络卡 网络接口：主要功能是提供网络地址（IP） 网络形态或拓扑typology：节点在网络上的链接方式，例如星型等 网关route或通讯闸gateway 计算机网络的区域范围
局域网 LAN 广域网 WAN 计算机网络协议
open system interconnection OSI 七层协议 越接近硬件的阶层为底层（layer 1），越接近应用程序的越高层（layer 7） 就像一个套一个的包裹，包裹表面是表头header，包裹里面是实际数据 TCP/IP 协议 将七层协议简化为四层 TCP/IP 链结层相关协议
广域网的设备 局域网使用的设备：以太网络（Ethernet） 以太网络网卡之间的数据传输：CSMA/CD 标准 （Carrier Sense Multiple Access with Collision Detection） 监听 多点传输 碰撞侦测 讯框frame，MAC MAC就是讯框，因为上面有目标与来源的网卡卡号，所以简称网卡卡号是MAC MAC (Media Access Control) 上面有以太网络卡卡号（hardware address，硬件地址），是十六进制的6字节数据 使用ifconfig来查询网卡卡号 资料里大小限制 46-1500bytes 要碰撞侦测，数据量至少64bytes，扣除地址什么的是46bytes，如果不足的话系统会自动填上填充码 MTU, maximum transmission unit，最大传输单位，默认1500，最大9000 改大一些可以减少封包数据的拆解，进而提升网络利用率，但是不是所有的网络媒体都支持大的MTU，可能会导致封包无效，所以不建议改大 集线器hub、交换机switch 区别：交换机克服了封包碰撞的问题，不是网络共享媒体（就像hub那样的十字路口） TCP/IP 网络层相关封包和数据</description>
    </item>
    
    <item>
      <title>Make File</title>
      <link>http://example.org/docs/stage1/make_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/make_file/</guid>
      <description> 概述 # makefile关系到了整个系统的编译规则，哪些文件需要先编译，哪些后编译等等 自动化编译 Makefile的规则 # target ...: prerequisites ... command ... ... 如果prerequisites后面的文件比target文件新，就执行command 执行：make 一层层地找文件的依赖关系，直到最终编译出第一个目标文件 变量 $(obj) 自动推导 make看到.o文件会自动把.c文件加在依赖关系prerequisites中 clean make clean 才会执行 放在文件的最后 </description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>http://example.org/docs/oatk/postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/oatk/postgresql/</guid>
      <description>Installation and Configuration # Install PostgreSQL
sudo apt install postgresql Connect to our PostgreSQL, modify password for postgres user
sudo -u postgres psql template1 //sudo -u xxx to run the command as xxx user other than the default target user (usually root) ALTER USER postgres with encrypted password &amp;#39;your_password&amp;#39;; // in SQL prompt sudo systemctl restart postgresql.service Test connections from local machines
sudo apt install postgresql-client psql --host your-servers-dns-or-ip --username postgres --password --dbname template1 // e.</description>
    </item>
    
    <item>
      <title>Tmux</title>
      <link>http://example.org/docs/stage1/tmux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/stage1/tmux/</guid>
      <description>将会话（还有内部的进程）与窗口解绑的工具
几个名词：
session 会话，理解成任务 window 窗口，当前呈现在面前的终端界面就是窗口 pane 窗格，把窗口切割成一小块一小块 一个会话可以有多个窗口，一个窗口可以又可以分隔成多个窗格 还允许多人实时共享对话 会话session操作
新建会话：tmux new -s 分离会话：tmux detach / ctrl+b d 查看所有会话：tmux ls 接入会话：tmux attach -t tmux attach -t 0 会话编号 杀死会话： tmux kill-session -t 会话编号/ 切换会话：tmux switch -t 会话编号/ 重命名会话：tmux rename-session -t 会话编号/session-name 快捷键 ctrl+b d 分离会话 ctrl+b s 列出所有会话 ctrl+b $ 重命名当前会话 查看session历史输出信息: 进入指定会话后，按ctrl+b，松开后按[，就可以进入历史输出信息查看模式，按q退出 窗格pane操作
划分窗格(pane) tmux split-window [-h]
移动光标 tmux select-pane -U/D/L/R
窗口操作
新建窗口 tmux new-window -n 切换窗口 tmux select -window -t &amp;lt;name/number&amp;gt; 重命名窗口 tmux rename-window </description>
    </item>
    
    <item>
      <title>Tugraph</title>
      <link>http://example.org/docs/oatk/tugraph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/oatk/tugraph/</guid>
      <description>Steps for compiling TuGraph docker pull tugraph/tugraph-compile-ubuntu18.04 docker run -it tugraph/tugraph-compile-ubuntu18.04 // In the container export http_proxy=http://child-prc.intel.com:913 export https_proxy=http://child-prc.intel.com:913 export HTTPS_PROXY=http://child-prc.intel.com:913 export HTTP_PROXY=http://child-prc.intel.com:913 git clone https://github.com/TuGraph-family/tugraph-db.git git submodule update &amp;ndash;init &amp;ndash;recursive cd tugraph-db deps/build_deps.sh deps/build_deps.sh &amp;ndash;fix cmake .. -DOURSYSTEM=ubuntu -DENABLE_PREDOWNLOAD_DEPENDS_PACKAGE=1 -DCMAKE_BUILD_TYPE=debug make make package dpkg -i tugraph-3.4.0-1.x86_64.deb export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/:$LD_LIBRARY_PATH lgraph_server
Expose container ports 7070 and 9090 to host machine docker ps docker commit &amp;lt;container_name_or_id&amp;gt; &amp;lt;new_image_name&amp;gt; docker stop &amp;lt;container_name_or_id&amp;gt; docker run -p &amp;lt;host_port&amp;gt;:&amp;lt;container_port&amp;gt; &amp;lt;new_image_name&amp;gt;</description>
    </item>
    
    <item>
      <title>C_and_linux</title>
      <link>http://example.org/docs/others/c_and_linux/</link>
      <pubDate>Mon, 08 May 2023 20:42:57 +0800</pubDate>
      
      <guid>http://example.org/docs/others/c_and_linux/</guid>
      <description> 程序的基本概念 # 程序和编程语言 # 汇编语言和机器语言的指令是一一对应的。
把机器语言中一组一组的数字用助记符(Mnemonic)表示，直接用这些助记符写出汇编程序，然后让汇编器(Assembler)去查表把助记符替换成数字，也就把汇编语言翻译成了机器语言。
汇编器就是做一个简单的替换工作。
C语言到汇编语言到过程是编译（compile），是平台无关的（platform independent），把C语言编译成各种不同体系结构的机器指令。
编译的过程不执行程序，只是把src翻译成机器指令。（编译型语言）
什么是平台?
一种平台，就是一种体系结构，就是一种指令集，就是一种机器语言
另外有解释型（interpret）语言：它把脚本中的每一行当作一条命令解释执行，而不需要先生成包含机器指令的可执行文件再执行。代码会逐行被解释器读取并转换为计算机能够理解的机器码，然后立即执行。SHELL脚本也是解释型语言
第一代：机器语言；第二代：汇编语言；第三代：C，C++，python等；第四代：声明式，例如SQL语言
自然语言和形式语言 # syntax语法规则，包含: 词法lexical规则，语法grammar规则
程序的调试 # 编译时错误：编译失败 运行时错误：运行崩溃 逻辑和语义错误 常量、变量和表达式 # 声明(Declaration)有变量声明、函数声明和类型声明三种 一个变量或函数的声明要求编译器为它分配存储空间，那么 也可以称为定义(Definition)。 定义是声明的一种 定义一个变量，就是分配 一块存储空间并给它命名;给一个变量赋值，就是把一个值保存到这块存储空间中。定义+赋值叫做初始化 char型本质上就是整数，只不过取值范围比int型 小，char型和int型统称为整数类型(Integer Type)或简称整型 &amp;lsquo;a&amp;rsquo;+1：结果是&amp;rsquo;b&amp;rsquo; </description>
    </item>
    
  </channel>
</rss>
